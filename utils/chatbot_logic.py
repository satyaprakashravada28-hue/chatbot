import pandas as pd
from transformers import pipeline
from langdetect import detect
import random

# Load dataset
try:
    df = pd.read_csv("agriassist_multilang_greeting.csv")
except Exception as e:
    print("‚ùå Error loading dataset:", e)
    df = pd.DataFrame(columns=["Name", "Use (English)", "Use (Telugu)", "Use (Hindi)", "Category"])

# Try to load QA pipeline
try:
    qa_pipeline = pipeline("question-answering", model="distilbert-base-uncased-distilled-squad")
except Exception as e:
    print("‚ùå Error loading transformers pipeline:", e)
    qa_pipeline = None

# Short replies dictionary (multi-language support)
shortcuts = {
    "en": {
        "hi": "Hello! I'm AgriAssist ‚Äî your farming buddy.",
        "joke": "üòÇ Why did the scarecrow win an award? Because he was outstanding in his field!"
    },
    "kn": {
        "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞.": "‡≤π‡≤≤‡≥ã! ‡≤®‡≤æ‡≤®‡≥Å ‡≤Ö‡≤ó‡≥ç‡≤∞‡≤ø‡≤Ö‡≤∏‡≤ø‡≤∏‡≥ç‡≤ü‡≥ç ‚Äî ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ï‡≥É‡≤∑‡≤ø ‡≤ó‡≥Ü‡≤≥‡≥Ü‡≤Ø.",
        "joke": "üòÇ ‡≤≠‡≥Ç‡≤§‡≤¶ ‡≤ó‡≥Å‡≤°‡≥ç‡≤°‡≤ó‡≥Ü ‡≤¨‡≤π‡≥Å‡≤Æ‡≤æ‡≤® ‡≤Ø‡≤æ‡≤ï‡≥Ü ‡≤∏‡≤ø‡≤ï‡≥ç‡≤ï‡≤ø‡≤§‡≥Å? ‡≤è‡≤ï‡≥Ü‡≤Ç‡≤¶‡≤∞‡≥Ü ‡≤Ö‡≤µ‡≤®‡≥Å ‡≤§‡≤®‡≥ç‡≤® ‡≤π‡≥ä‡≤≤‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Ö‡≤∏‡≤æ‡≤ß‡≤æ‡≤∞‡≤£‡≤®‡≤æ‡≤ó‡≤ø‡≤¶‡≥ç‡≤¶!"
    },
    "ml": {
        "‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç.": "‡¥π‡¥≤‡µã! ‡¥û‡¥æ‡¥®‡¥æ‡¥£‡µç ‡¥Ö‡¥ó‡µç‡¥∞‡¥ø‡¥Ö‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‚Äî ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µÉ‡¥∑‡¥ø‡¥∏‡µç‡¥•‡¥≤‡¥Ç ‡¥ï‡µÇ‡¥ü‡µç‡¥ü‡µÅ‡¥ï‡¥æ‡¥∞‡¥®‡µç‚Äç.",
        "joke": "üòÇ ‡¥ï‡¥æ‡¥ï‡µç‡¥ï‡¥Ø‡µÜ ‡¥≠‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥®‡µç‡¥® ‡¥Æ‡µã‡¥°‡¥≤‡¥ø‡¥®‡µç ‡¥Ö‡¥µ‡¥æ‡µº‡¥°‡µç ‡¥≤‡¥≠‡¥ø‡¥ö‡µç‡¥ö‡¥§‡µç ‡¥é‡¥®‡µç‡¥§‡µÅ‡¥ï‡µä‡¥£‡µç‡¥ü‡µç? ‡¥ï‡¥æ‡¥∞‡¥£‡¥Ç ‡¥Ö‡¥§‡µç ‡¥§‡¥®‡µç‡¥±‡µÜ ‡¥µ‡¥Ø‡¥≤‡¥ø‡µΩ ‡¥Æ‡¥ø‡¥ï‡¥ö‡µç‡¥ö‡¥§‡¥æ‡¥Ø‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡µÅ!"
    },
    "pa": {
        "hi": "‡®π‡©à‡®≤‡©ã! ‡®Æ‡©à‡®Ç ‡®Ö‡©à‡®ó‡®∞‡©Ä‡®Ö‡®∏‡®ø‡®∏‡®ü ‡®π‡®æ‡®Ç ‚Äî ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®ñ‡©á‡®§‡©Ä‡®¨‡®æ‡©ú‡©Ä ‡®∏‡®æ‡®•‡©Ä.",
        "joke": "üòÇ ‡®°‡®∞‡®æ‡®â‡®£‡©Ä ‡®™‡®§‡®≤ ‡®®‡©Ç‡©∞ ‡®á‡®®‡®æ‡®Æ ‡®ï‡®ø‡®â‡®Ç ‡®Æ‡®ø‡®≤‡®ø‡®Ü? ‡®ï‡®ø‡®â‡®Ç‡®ï‡®ø ‡®â‡®π ‡®Ü‡®™‡®£‡©á ‡®ñ‡©á‡®§ ‡®µ‡®ø‡©±‡®ö ‡®∏‡®º‡®æ‡®®‡®¶‡®æ‡®∞ ‡®∏‡©Ä!"
    },
    "gu": {
        "hi": "‡™π‡´á‡™≤‡´ã! ‡™π‡´Å‡™Ç ‡™è‡™ó‡´ç‡™∞‡´Ä‡™Ö‡™∏‡™ø‡™∏‡´ç‡™ü ‡™õ‡´Å‡™Ç ‚Äî ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™ñ‡´á‡™§‡´Ä ‡™∏‡™π‡™æ‡™Ø‡™ï.",
        "joke": "üòÇ ‡™≠‡´Ç‡™§‡™ø‡™Ø‡™æ ‡™ï‡™æ‡™ï‡™°‡™æ‡™®‡´á ‡™è‡™µ‡´ã‡™∞‡´ç‡™° ‡™∂‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™Æ‡™≥‡´ç‡™Ø‡´ã? ‡™ï‡™æ‡™∞‡™£ ‡™ï‡´á ‡™§‡´á ‡™™‡´ã‡™§‡™æ‡™®‡´Ä ‡™ñ‡´á‡™§‡™∞‡™Æ‡™æ‡™Ç ‡™â‡™§‡´ç‡™ï‡´É‡™∑‡´ç‡™ü ‡™π‡™§‡´ã!"
    },
    "or": {
        "hi": "‡¨®‡¨Æ‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞! ‡¨Æ‡≠Å‡¨Å ‡¨Ö‡¨ó‡≠ç‡¨∞‡¨ø‡¨Ö‡¨∏‡¨ø‡¨∑‡≠ç‡¨ü ‚Äî ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨ï‡≠É‡¨∑‡¨ø ‡¨∏‡¨π‡¨Ø‡≠ã‡¨ó‡≠Ä‡•§",
        "joke": "üòÇ ‡¨ï‡¨æ‡¨â‡¨ï‡≠Å ‡¨≠‡≠ü ‡¨™‡¨ï‡¨æ‡¨â‡¨•‡¨ø‡¨¨‡¨æ ‡¨ù‡≠Å‡¨≤‡¨æ‡¨ï‡≠Å ‡¨™‡≠Å‡¨∞‡¨∏‡≠ç‡¨ï‡¨æ‡¨∞ ‡¨Æ‡¨ø‡¨≥‡¨ø‡¨≤‡¨æ ‡¨ï‡¨æ‡¨π‡¨ø‡¨Å‡¨ï‡¨ø? ‡¨ï‡¨æ‡¨∞‡¨£ ‡¨∏‡≠á ‡¨§‡¨æ‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨ñ‡≠á‡¨§‡¨∞‡≠á ‡¨Ö‡¨∏‡¨æ‡¨ß‡¨æ‡¨∞‡¨£ ‡¨•‡¨ø‡¨≤‡≠á!"
    },
    "bn": {
        "hi": "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ó‡ßç‡¶∞‡¶ø‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü ‚Äî ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡•§",
        "joke": "üòÇ ‡¶ï‡¶æ‡¶ï‡¶≠‡ßÄ‡¶§‡¶ø‡¶∞ ‡¶Æ‡ßÇ‡¶∞‡ßç‡¶§‡¶ø‡¶ï‡ßá ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤ ‡¶ï‡ßá‡¶®? ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶∏‡ßá ‡¶§‡¶æ‡¶∞ ‡¶ñ‡ßá‡¶§‡ßá ‡¶Ö‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶õ‡¶ø‡¶≤!"
    },
    "as": {
        "hi": "‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡ß∞! ‡¶Æ‡¶á ‡¶è‡¶ó‡ßç‡ß∞‡¶ø‡¶Ö‡¶õ‡¶ø‡¶∑‡ßç‡¶ü ‚Äî ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶ñ‡ßá‡¶§‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§",
        "joke": "üòÇ ‡¶ï‡ßá‡¶Å‡¶ö‡¶æ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶π‡¶ú‡¶®‡¶ï ‡¶™‡ßÅ‡ß∞‡¶∏‡ßç‡¶ï‡¶æ‡ß∞ ‡¶ï‡¶ø‡¶Ø‡¶º ‡¶¶‡¶ø‡¶Ø‡¶º‡¶æ ‡¶π‡ßà‡¶õ‡¶ø‡¶≤? ‡¶ï‡¶æ‡ß∞‡¶£ ‡¶§‡ßá‡¶ì‡¶Å ‡¶®‡¶ø‡¶ú‡ß∞ ‡¶ñ‡ßá‡¶§‡¶ø‡¶§ ‡¶Ö‡¶§‡¶ø ‡¶â‡ßé‡¶ï‡ßÉ‡¶∑‡ßç‡¶ü ‡¶Ü‡¶õ‡¶ø‡¶≤!"
    },
    "te": {
        "‡∞π‡∞æ‡∞Ø‡±ç.": "üëã ‡∞π‡∞æ‡∞Ø‡±ç ‡∞∞‡±à‡∞§‡±Ç! ‡∞é‡∞≤‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞µ‡±Å?",
        "‡∞π‡∞≤‡±ã.": "üå± ‡∞π‡∞≤‡±ã! ‡∞®‡±á‡∞®‡±Å ‡∞®‡±Ä ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡±ç‡∞®‡±á‡∞π‡∞ø‡∞§‡±Å‡∞°‡±Å AgriAssist.",
        '‡∞π‡±Ü‡∞≤‡±ç.':"üå± ‡∞π‡∞≤‡±ã! ‡∞®‡±á‡∞®‡±Å ‡∞®‡±Ä ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡±ç‡∞®‡±á‡∞π‡∞ø‡∞§‡±Å‡∞°‡±Å AgriAssist.",
        "‡∞è‡∞Æ‡∞®‡±ç‡∞®‡∞æ‡∞µ‡±Å.": "üòÉ ‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±á ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡±Å ‡∞∞‡±à‡∞§‡±Ç, ‡∞®‡±Ä‡∞ï‡±Å ‡∞è‡∞Ç ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞ø?",
        "‡∞é‡∞Ç ‡∞∞‡∞æ ‡∞¨‡∞æ‡∞¨‡±Å.": "üòÇ ‡∞®‡±á‡∞®‡±á AgriAssist ‡∞¨‡∞æ‡∞¨‡±Å, ‡∞®‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞µ‡∞ö‡±ç‡∞ö‡∞æ‡∞®‡±Å!",
        "‡∞ú‡±ã‡∞ï‡±ç ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡±Å.": "üòÇ ‡∞ì ‡∞∞‡±à‡∞§‡±Å ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞Ü‡∞®‡∞Ç‡∞¶‡∞Ç‡∞ó‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞°‡±Å? ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡∞Ç‡∞ü‡±á ‡∞™‡∞Ç‡∞ü ‡∞¨‡∞æ‡∞ó‡±Å‡∞Ç‡∞¶‡∞ø!",
        "‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±Ü‡∞µ‡∞∞‡±Å.": "ü§ñ ‡∞®‡±á‡∞®‡±Å AgriAssist ‚Äî ‡∞®‡±Ä ‡∞°‡∞ø‡∞ú‡∞ø‡∞ü‡∞≤‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡±ç‡∞®‡±á‡∞π‡∞ø‡∞§‡±Å‡∞°‡±Å.",
        "‡∞é‡∞≤‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞µ‡±Å?": "üòá ‡∞¨‡∞æ‡∞ó‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å! ‡∞∞‡±à‡∞§‡±Å‡∞≤‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç ‡∞®‡∞æ ‡∞Ü‡∞®‡∞Ç‡∞¶‡∞Ç.",
        "‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç.": "üå¶Ô∏è ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ? ‡∞Ö‡∞°‡±Å‡∞ó‡±Å.",
        "‡∞™‡∞Ç‡∞ü.": "üåæ ‡∞è ‡∞™‡∞Ç‡∞ü ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡∞ø?",
        "‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å.": "üôè ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å! ‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞®‡±Å."
    },
    "hi": {
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á‡•§": "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§ï‡§ø‡§∏‡§æ‡§®! ‡§Æ‡•à‡§Ç AgriAssist ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§∏‡§æ‡§•‡•Ä‡•§",
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á‡•§": "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§ï‡§ø‡§∏‡§æ‡§®! ‡§Æ‡•à‡§Ç AgriAssist ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§∏‡§æ‡§•‡•Ä‡•§",
        "‡§ú‡•ã‡§ï": "üòÇ ‡§°‡§∞‡§æ‡§µ‡§®‡§æ ‡§™‡•Å‡§§‡§≤‡§æ ‡§á‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ú‡•Ä‡§§‡§æ? ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§µ‡§π ‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§ñ‡§°‡§º‡§æ ‡§•‡§æ!",
        "‡§Ü‡§™ ‡§ï‡•å‡§® ‡§π‡•ã?": "ü§ñ ‡§Æ‡•à‡§Ç AgriAssist ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§ñ‡•á‡§§‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§",
        "‡§ï‡•à‡§∏‡•á ‡§π‡•ã?": "üòá ‡§Æ‡•à‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•Ç‡§Å! ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§π‡•Ä ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•à‡•§",
        "‡§Æ‡•å‡§∏‡§Æ‡•§": "üå¶Ô∏è ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è?",
        "‡§´‡§∏‡§≤‡•§": "üåæ ‡§ï‡§ø‡§∏ ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§π‡•à?",
        "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§": "üôè ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§"
    }
}

# === MAIN FUNCTION ===
def generate_chatbot_response(user_input):
    try:
        if not user_input.strip():
            return "Please ask something related to farming or crops."

        if qa_pipeline is None:
            return "‚ö†Ô∏è Chatbot model not loaded. Please check the backend."

        cleaned_input = user_input.strip().lower()

        # --- Detect language (default English if fail)
        try:
            lang_detected = detect(user_input)
        except:
            lang_detected = "en"

        if lang_detected.startswith("te"):
            lang = "te"
            response_column = "Use (Telugu)"
        elif lang_detected.startswith("kn"):
            lang = "kn"
        elif lang_detected.startswith("hi"):
            lang = "hi"
            response_column = "Use (Kannada)"
        elif lang_detected.startswith("ml"):
            lang = "ml"
            response_column = "Use (Malayalam)"
        elif lang_detected.startswith("pa"):
            lang = "pa"
            response_column = "Use (Punjabi)"
        elif lang_detected.startswith("gu"):
            lang = "gu"
            response_column = "Use (Gujarati)"
        elif lang_detected.startswith("or"):
            lang = "or"
            response_column = "Use (Odia)"
        elif lang_detected.startswith("bn"):
            lang = "bn"
            response_column = "Use (Bengali)"
        elif lang_detected.startswith("as"):
            lang = "as"
            response_column = "Use (Assamese)"
        else:
            lang = "en"
            response_column = "Use (English)"

        # --- 1. Shortcuts (multi-language)
        if cleaned_input in shortcuts.get(lang, {}):
            return shortcuts[lang][cleaned_input]

        # --- 2. Exact match on 'Name'
        exact = df[df["Name"].str.lower() == cleaned_input]
        if not exact.empty:
            return exact.iloc[0].get(response_column, exact.iloc[0]["Use (English)"])

        # --- 3. Partial match on 'Name'
        partial = df[df["Name"].str.lower().str.contains(cleaned_input)]
        if not partial.empty:
            return partial.iloc[0].get(response_column, partial.iloc[0]["Use (English)"])

        # --- 4. Category match
        category_match = df[df["Category"].str.lower() == cleaned_input]
        if not category_match.empty:
            return random.choice(category_match[response_column].dropna().tolist())

        # --- 5. QA Fallback
        full_context = "\n".join([f"{row['Name']}: {row.get(response_column, row.get('Use (English)', ''))}"
                                  for _, row in df.iterrows()])

        result = qa_pipeline({
            "context": full_context,
            "question": user_input
        })

        answer = result.get("answer", "")
        score = result.get("score", 0)

        if score > 0.3 and len(answer) > 3:
            return answer.strip()
        else:
            return {
                "en": "ü§î I'm not sure. Try asking about crops, soil, fertilizers, irrigation, or weather.",
                "te": "ü§î ‡∞®‡∞æ‡∞ï‡±Å ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞Ç‡∞ó‡∞æ ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞¶‡±Å. ‡∞™‡∞Ç‡∞ü‡∞≤‡±Å, ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å, ‡∞®‡±Ä‡∞ü‡∞ø ‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞≤‡±á‡∞¶‡∞æ ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.",
                "hi": "ü§î ‡§Æ‡•Å‡§ù‡•á ‡§Ø‡§ï‡•Ä‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§´‡§∏‡§≤, ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï, ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§Ø‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§",
                "kn": " ‡≤®‡≤®‡≤ó‡≥Ü ‡≤ñ‡≤ö‡≤ø‡≤§‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤ó‡≤≥‡≥Å, ‡≤∞‡≤∏‡≤ó‡≥ä‡≤¨‡≥ç‡≤¨‡≤∞‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤ï‡≥á‡≤≥‡≤ø.",
                "ml": " ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡¥ø‡¥≤‡µç‡¥≤. ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ, ‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ, ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥µ‡¥Ø‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÇ.",
                "pa": " ‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®™‡®§‡®æ ‡®®‡®π‡©Ä‡®Ç‡•§ ‡®´‡®∏‡®≤‡®æ‡®Ç, ‡®ñ‡®æ‡®¶‡®æ‡®Ç ‡®ú‡®æ‡®Ç ‡®Æ‡©å‡®∏‡®Æ ‡®¨‡®æ‡®∞‡©á ‡®™‡©Å‡©±‡®õ‡©ã ‡®ú‡©Ä‡•§",
                "gu": " ‡™Æ‡™®‡´á ‡™ñ‡™æ‡™§‡™∞‡´Ä ‡™®‡™•‡´Ä. ‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™™‡™æ‡™ï‡´ã, ‡™ñ‡™æ‡™§‡™∞‡´ã, ‡™∏‡™ø‡™Ç‡™ö‡™æ‡™à ‡™Ö‡™•‡™µ‡™æ ‡™π‡™µ‡™æ‡™Æ‡™æ‡™® ‡™µ‡™ø‡™∂‡´á ‡™™‡´Ç‡™õ‡´ã.",
                "or": " ‡¨Æ‡≠ã‡¨§‡≠á ‡¨®‡¨ø‡¨∂‡≠ç‡¨ö‡¨ø‡¨§ ‡¨®‡≠Å‡¨π‡≠á‡¨Å‡•§ ‡¨´‡¨∏‡¨≤, ‡¨∏‡¨∞‡≠ç‡¨¨‡¨∞‡¨æ‡¨π, ‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ ‡¨¨‡¨ø‡¨∑‡≠ü‡¨∞‡≠á ‡¨™‡¨ö‡¨æ‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
                "bn": " ‡¶Ü‡¶Æ‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶®‡¶á‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶´‡¶∏‡¶≤, ‡¶∏‡¶æ‡¶∞, ‡¶¨‡¶æ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                "as": " ‡¶Æ‡¶á ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶®‡¶π‡¶Ø‡¶º‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡ß∞‡¶π ‡¶ï‡ß∞‡¶ø ‡¶ñ‡ßá‡¶§‡¶ø, ‡¶∏‡¶æ‡ß∞ ‡¶¨‡¶æ ‡¶¨‡¶§‡ß∞‡ß∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶∏‡ßã‡¶ß‡¶ï‡•§"
                }.get(lang, "ü§î I'm not sure.")
    except Exception as e:
        return f"‚ö†Ô∏è Error in chatbot response: {str(e)}"
